# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0


AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS GenAI IDP Accelerator - resources for IDP Pattern 2

Parameters:

  StackName:
    Type: String

  InputBucket:
    Type: String

  ConfigurationBucket:
    Type: String

  OutputBucket:
    Type: String

  TrackingTable:
    Type: String

  CustomerManagedEncryptionKeyArn:
    Type: String

  LogRetentionDays:
    Type: Number
  
  LogLevel:
    Type: String
    Default: WARN
    AllowedValues:
      - DEBUG
      - INFO
      - WARN
      - ERROR
      - CRITICAL
    Description: Default logging level for all Lambda functions
    
  AppSyncApiUrl:
    Type: String
    Description: The AppSync API URL for status updates
    
  AppSyncApiArn:
    Type: String
    Description: The AppSync API ARN for IAM permissions
  
  ExecutionTimeThresholdMs:
    Type: Number
    Default: 30000


  CustomClassificationModelARN:
    Type: String
    Default: ''

  CustomExtractionModelARN:
    Type: String
    Default: ''

  UpdateConfigurationFunctionArn:
    Type: String

  ConfigurationTable:
    Type: String
    
  IsSummarizationEnabled:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable or disable document summarization functionality
    
  BedrockGuardrailId:
    Type: String
    Default: ""
    Description: "Optionally provide the Id (not name) of an existing Bedrock Guardrail to be used for Bedrock interactions"
    
  BedrockGuardrailVersion:
    Type: String
    Default: ""
    Description: "If you provided a Bedrock Guardrail Id above, provide the corresponding Guardrail version here"

  ConfigurationDefaultS3Uri:
    Type: String
    Description: "S3 URI (s3://bucket/path/config.json) to import default configuration from S3"

  ConfigLibraryHash:
    Type: String
    Description: "Hash token from config library to force updates when config library changes"

Conditions:
  IsSummarizationEnabled: !Equals [!Ref IsSummarizationEnabled, "true"]
  HasGuardrailConfig: !And [!Not [!Equals [!Ref BedrockGuardrailId, ""]], !Not [!Equals [!Ref BedrockGuardrailVersion, ""]]]


Resources:

  # JSON Schema which defines the structure of the pattern configuration settings
  # used by the UI to allow the configuration to be inspected and customized.
  UpdateSchemaConfig:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Ref UpdateConfigurationFunctionArn
      Schema: 
        type: object
        required:
          - notes
          - classes
          - classification
          - extraction
        properties:
          notes:
            order: 0
            type: string
            description: Notes
          ocr:
            order: 1
            type: object
            sectionLabel: OCR Configuration
            required:
              - features
            properties:
              features:
                  type: array
                  listLabel: Features
                  itemLabel: Feature
                  items:
                    type: object
                    required:
                      - name
                    properties:
                      name:
                        type: string
                        description: "Feature - select one of the supported OCR feature types"
                        enum: ["TABLES", "FORMS", "SIGNATURES", "LAYOUT"]
          classes:
            order: 2
            type: array
            sectionLabel: Class definitions
            listLabel: Classes
            itemLabel: Class
            columns: 2
            items:
              type: object
              required:
                - name
                - description
                - attributes
              properties:
                name:
                  type: string
                  description: Class name
                description:
                  type: string
                  description: Class description
                examples:
                  type: array
                  description: Class few-shot examples
                  listLabel: Few-shot examples
                  itemLabel: Few-shot example
                  items:
                    type: object
                    required:
                      - name
                      - classPrompt
                      - attributesPrompt
                      - imagesPath
                    properties:
                      name:
                        type: string
                        description: Example name
                        order: 0
                      classPrompt:
                        type: string
                        description: Classification prompt as few-shot classification example for this class
                        order: 2
                      attributesPrompt:
                        type: string
                        description: Extraction prompt as few-shot attribute value extraction example for this class.
                        order: 3
                      imagePath:
                        type: string
                        description: Image(s) Path in the Configuration Bucket. Supports single files, or S3 prefixes for folders with multiple images. Optional but recommended for better visual understanding.
                        order: 4
                attributes:
                  type: array
                  listLabel: Attributes
                  itemLabel: Attribute
                  items:
                    type: object
                    required:
                      - name
                      - description
                    properties:
                      name:
                        type: string
                        description: Attribute name
                        order: 0
                      description:
                        type: string
                        description: Attribute description
                        order: 1
                      # Group these fields in a new row with columns for side-by-side display
                      evaluation_method:
                        type: string
                        description: Evaluation Method
                        enum: ["", "LLM", "SEMANTIC", "FUZZY", "HUNGARIAN", "NUMERIC_EXACT", "EXACT"]
                        order: 2
                      hungarian_comparator:
                        type: string
                        description: "Comparator type for HUNGARIAN method"
                        enum: ["EXACT", "FUZZY", "NUMERIC"]
                        order: 3
                        dependsOn: {
                          field: "evaluation_method",
                          value: "HUNGARIAN"
                        }
                      evaluation_threshold:
                        type: number
                        description: Evaluation Threshold - used for SEMANTIC, FUZZY, and HUNGARIAN_FUZZY methods
                        minimum: 0
                        maximum: 1
                        order: 4
                        dependsOn: {
                          field: "evaluation_method",
                          values: ["SEMANTIC", "FUZZY", "HUNGARIAN_FUZZY"]
                        }
                    # This controls the layout of the form fields inside each attribute item
                    columns: 2
          classification:
            order: 3
            type: object
            sectionLabel: Classification Inference
            required:
              - model
              - temperature
              - top_k
              - top_p
              - max_tokens
              - system_prompt
              - task_prompt
            properties:
              model:
                type: string
                description: Model identifier
                enum: ["us.amazon.nova-lite-v1:0", "us.amazon.nova-pro-v1:0", "us.amazon.nova-premier-v1:0", "us.anthropic.claude-3-haiku-20240307-v1:0", "us.anthropic.claude-3-5-sonnet-20241022-v2:0", "us.anthropic.claude-3-7-sonnet-20250219-v1:0", "us.anthropic.claude-sonnet-4-20250514-v1:0", "us.anthropic.claude-opus-4-20250514-v1:0"]
                order: 1
              classificationMethod:
                type: string
                description: "Classification methodology to use"
                enum: ["multimodalPageLevelClassification", "textbasedHolisticClassification"]
                order: 2
              temperature:
                type: number
                minimum: 0
                maximum: 1
                description: Sampling temperature
                order: 3
              top_k:
                type: integer
                minimum: 1
                description: Sampling Top K
                order: 4
              top_p:
                type: number
                description: Sampling Top P
                order: 5
              max_tokens:
                type: number
                description: Max tokens
                order: 6
              system_prompt:
                type: string
                description: System prompt
                order: 7
              task_prompt:
                type: string
                description: Task prompt - include placeholders {CLASS_NAMES_AND_DESCRIPTIONS} (replaced with the class names and descriptions for all specified classes), {FEW_SHOT_EXAMPLES} (replaced by classPrompt and image data from examples in class definitions), {DOCUMENT_TEXT} (replaced by the OCR output), and for multi-modal classification {DOCUMENT_IMAGE} (replaced by the page image attachment). Optionally use <<CACHEPOINT>> to separate static and dynamic elements of prompt for Bedrock prompt caching.
                order: 8
          extraction:
            order: 4
            type: object
            format: section
            sectionLabel: Extraction Inference
            required:
              - model
              - temperature
              - top_k
              - top_p
              - max_tokens
              - system_prompt
              - task_prompt
            properties:
              model:
                type: string
                description: Model identifier
                enum: ["us.amazon.nova-lite-v1:0", "us.amazon.nova-pro-v1:0", "us.amazon.nova-premier-v1:0", "us.anthropic.claude-3-haiku-20240307-v1:0", "us.anthropic.claude-3-5-sonnet-20241022-v2:0", "us.anthropic.claude-3-7-sonnet-20250219-v1:0", "us.anthropic.claude-sonnet-4-20250514-v1:0", "us.anthropic.claude-opus-4-20250514-v1:0"]
                order: 1
              temperature:
                type: number
                minimum: 0
                maximum: 1
                description: Sampling temperature
                order: 2
              top_k:
                type: integer
                minimum: 1
                description: Sampling Top K
                order: 3
              top_p:
                type: number
                description: Sampling Top P
                order: 4
              max_tokens:
                type: number
                description: Max tokens
                order: 5
              system_prompt:
                type: string
                description: System prompt
                order: 6
              task_prompt:
                type: string
                description: Task prompt - supports placeholders {DOCUMENT_CLASS} (replaced with the detected class label), {ATTRIBUTE_NAMES_AND_DESCRIPTIONS} (replaced with the attribute names and descriptions for the detected class), {FEW_SHOT_EXAMPLES} (replaced by classPrompt and image data from examples in class definitions), {DOCUMENT_TEXT} (replaced by the OCR output), and {DOCUMENT_IMAGE} (replaced by the page image attachments for each page). Optionally use <<CACHEPOINT>> to separate static and dynamic elements of prompt for Bedrock prompt caching.
                order: 7
          evaluation:
            order: 5
            type: object
            sectionLabel: Evaluation Inference
            properties:
              llm_method:
                type: object
                properties:
                  model:
                    type: string
                    description: Bedrock model ID
                    enum: ["us.amazon.nova-lite-v1:0", "us.amazon.nova-pro-v1:0", "us.amazon.nova-premier-v1:0", "us.anthropic.claude-3-haiku-20240307-v1:0", "us.anthropic.claude-3-5-sonnet-20241022-v2:0", "us.anthropic.claude-3-7-sonnet-20250219-v1:0", "us.anthropic.claude-sonnet-4-20250514-v1:0", "us.anthropic.claude-opus-4-20250514-v1:0"]
                    order: 1
                  temperature:
                    type: number
                    description: Sampling temperature
                    default: 0.0
                    order: 2
                  top_k:
                    type: number
                    description: Sampling Top K
                    default: 250
                    order: 3
                  top_p:
                    type: number
                    description: Sampling Top P
                    order: 4
                  max_tokens:
                    type: number
                    description: Max tokens
                    order: 5
                  system_prompt:
                    type: string
                    format: textarea
                    description: System prompt for LLM evaluation
                    order: 6
                  task_prompt:
                    type: string
                    format: textarea
                    description: Task prompt for LLM evaluation - supports placeholders {DOCUMENT_CLASS}, {ATTRIBUTE_NAME}, {ATTRIBUTE_DESCRIPTION}, {EXPECTED_VALUE} and {ACTUAL_VALUE}
                    order: 7
          summarization:
            order: 6
            type: object
            sectionLabel: Summarization Inference
            properties:
              model:
                type: string
                description: Bedrock model ID
                enum: ["us.amazon.nova-lite-v1:0", "us.amazon.nova-pro-v1:0", "us.amazon.nova-premier-v1:0", "us.anthropic.claude-3-haiku-20240307-v1:0", "us.anthropic.claude-3-5-sonnet-20241022-v2:0", "us.anthropic.claude-3-7-sonnet-20250219-v1:0", "us.anthropic.claude-sonnet-4-20250514-v1:0", "us.anthropic.claude-opus-4-20250514-v1:0"]
                order: 1
              temperature:
                type: number
                description: Sampling temperature
                order: 2
              top_k:
                type: number
                description: Sampling Top K
                order: 3
              top_p:
                type: number
                description: Sampling Top P
                order: 4
              max_tokens:
                type: number
                description: Max tokens
                order: 5
              system_prompt:
                type: string
                format: textarea
                description: System prompt
                order: 6
              task_prompt:
                type: string
                format: textarea
                description: Task prompt - supports parameter {DOCUMENT_TEXT}. Optionally use <<CACHEPOINT>> to separate static and dynamic elements of prompt for Bedrock prompt caching.
                order: 7
          pricing:
            order: 7
            type: array
            sectionLabel: Pricing (Estimates only - check https://aws.amazon.com/bedrock/pricing/ & https://aws.amazon.com/textract/pricing/)
            listLabel: Services
            itemLabel: Service/API
            columns: 2
            items:
              type: object
              required:
                - name
                - units
              properties:
                name:
                  type: string
                  description: Service/API
                units:
                  type: array
                  listLabel: Metered unit pricing
                  itemLabel: Metered Unit price
                  items:
                    type: object
                    required:
                      - name
                      - price
                    properties:
                      name:
                        type: string
                        description: Metered unit name
                      price:
                        type: number
                        description: Estimated cost/unit
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  UpdateDefaultConfig:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Ref UpdateConfigurationFunctionArn
      Default: !Ref ConfigurationDefaultS3Uri
      ConfigLibraryHash: !Ref ConfigLibraryHash

  OCRFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not require VPC access as it only interacts with AWS services via AWS APIs"
          - id: W92
            reason: "Function does not require concurrent execution limits as it is designed to scale based on demand"
          - id: W11
            reason: "Textract DetectDocumentText API and Cloudwatch APIs do not support resource-level permissions"
    # checkov:skip=CKV_AWS_116: "DLQ not required for this function as StepFunctions will handle retries"
    # checkov:skip=CKV_AWS_173: "Environment variables do not contain sensitive data - only configuration values like feature flags and non-sensitive settings"
    # checkov:skip=CKV_AWS_117: "Function does not require VPC access as it only interacts with AWS services via APIs"
    # checkov:skip=CKV_AWS_115: "Function does not require reserved concurrency as it scales based on demand"
    Properties:
      CodeUri: src/ocr_function/
      Handler: index.handler
      Runtime: python3.12
      Timeout: 900
      MemorySize: 4096
      Environment:
        Variables:
          METRIC_NAMESPACE: !Ref StackName
          MAX_WORKERS: 20
          CONFIGURATION_TABLE_NAME: !Ref ConfigurationTable
          LOG_LEVEL: !Ref LogLevel
          APPSYNC_API_URL: !Ref AppSyncApiUrl
      LoggingConfig:
        LogGroup: !Ref OCRFunctionLogGroup
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref OutputBucket
        - S3ReadPolicy:
            BucketName: !Ref InputBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref ConfigurationTable
        - Statement:
          - Effect: Allow
            Action: cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: !Ref CustomerManagedEncryptionKeyArn
          # Textract APIs require '*' as they don't support resource-level permissions
          - Effect: Allow
            Action: 
              - textract:DetectDocumentText
              - textract:AnalyzeDocument
            Resource: '*'
          # AppSync permissions for updating document status
          - Effect: Allow
            Action:
              - appsync:GraphQL
            Resource: 
              - !Sub "${AppSyncApiArn}/types/Mutation/*"

  
  OCRFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !Ref CustomerManagedEncryptionKeyArn
      LogGroupName: !Sub "/${AWS::StackName}/lambda/OCRFunction"
      RetentionInDays: !Ref LogRetentionDays

  ClassificationFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Cloudwatch does not support resource-level permissions"
          - id: W89
            reason: "This Lambda function does not require VPC access as it only interacts with AWS services via AWS APIs"
          - id: W92
            reason: "Function does not require concurrent execution limits as it is designed to scale based on demand"
    # checkov:skip=CKV_AWS_116: "DLQ not required for this function as StepFunctions will handle retries"
    # checkov:skip=CKV_AWS_173: "Environment variables do not contain sensitive data - only configuration values like feature flags and non-sensitive settings"
    # checkov:skip=CKV_AWS_117: "Function does not require VPC access as it only interacts with AWS services via APIs"
    # checkov:skip=CKV_AWS_115: "Function does not require reserved concurrency as it scales based on demand"
    Properties:
      CodeUri: src/classification_function/
      Handler: index.handler
      Runtime: python3.12
      Timeout: 900
      MemorySize: 4096
      Environment:
        Variables:
          METRIC_NAMESPACE: !Ref StackName
          MAX_WORKERS: 20
          TRACKING_TABLE: !Ref TrackingTable
          CONFIGURATION_BUCKET: !Ref ConfigurationBucket
          CONFIGURATION_TABLE_NAME: !Ref ConfigurationTable
          LOG_LEVEL: !Ref LogLevel
          APPSYNC_API_URL: !Ref AppSyncApiUrl
          # Guardrails break classification
          # GUARDRAIL_ID_AND_VERSION: !If [HasGuardrailConfig, !Sub "${BedrockGuardrailId}:${BedrockGuardrailVersion}", ""]
      LoggingConfig:
        LogGroup: !Ref ClassificationFunctionLogGroup
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref OutputBucket
        - S3ReadPolicy:
            BucketName: !Ref InputBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref TrackingTable
        - S3ReadPolicy:
            BucketName: !Ref ConfigurationBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref ConfigurationTable
        - Statement:
          - Effect: Allow
            Action: cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: !Ref CustomerManagedEncryptionKeyArn
          # AppSync permissions for updating document status
          - Effect: Allow
            Action:
              - appsync:GraphQL
            Resource: 
              - !Sub "${AppSyncApiArn}/types/Mutation/*"
          - Effect: Allow
            Action: bedrock:InvokeModel
            Resource: 
                - !Sub "arn:aws:bedrock:*::foundation-model/*"
                - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/*"
          - !If
            - HasGuardrailConfig
            - Effect: Allow
              Action: bedrock:ApplyGuardrail
              Resource: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:guardrail/${BedrockGuardrailId}"
            - !Ref AWS::NoValue
  
  ClassificationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !Ref CustomerManagedEncryptionKeyArn
      LogGroupName: !Sub "/${AWS::StackName}/lambda/ClassificationFunction"
      RetentionInDays: !Ref LogRetentionDays
  
  ExtractionFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not require VPC access as it only interacts with AWS services via AWS APIs"
          - id: W92
            reason: "Function does not require concurrent execution limits as it is designed to scale based on demand"
          - id: W11
            reason: "Cloudwatch does not support resource-level permissions, and Bedrock should support any enabled Bedrock model_id or inference profile"
    # checkov:skip=CKV_AWS_116: "DLQ not required for this function as StepFunctions will handle retries"
    # checkov:skip=CKV_AWS_173: "Environment variables do not contain sensitive data - only configuration values like feature flags and non-sensitive settings"
    # checkov:skip=CKV_AWS_117: "Function does not require VPC access as it only interacts with AWS services via APIs"
    # checkov:skip=CKV_AWS_115: "Function does not require reserved concurrency as it scales based on demand"
    Properties:
      CodeUri: src/extraction_function/
      Handler: index.handler
      Runtime: python3.12
      Timeout: 900
      MemorySize: 512
      Environment:
        Variables:
          METRIC_NAMESPACE: !Ref StackName
          CONFIGURATION_BUCKET: !Ref ConfigurationBucket
          CONFIGURATION_TABLE_NAME: !Ref ConfigurationTable
          GUARDRAIL_ID_AND_VERSION: !If [HasGuardrailConfig, !Sub "${BedrockGuardrailId}:${BedrockGuardrailVersion}", ""]
          LOG_LEVEL: !Ref LogLevel
          APPSYNC_API_URL: !Ref AppSyncApiUrl
      LoggingConfig:
        LogGroup: !Ref ExtractionFunctionLogGroup
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref OutputBucket
        - S3ReadPolicy:
            BucketName: !Ref InputBucket
        - S3ReadPolicy:
            BucketName: !Ref ConfigurationBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref ConfigurationTable
        - Statement:
          - Effect: Allow
            Action: cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: !Ref CustomerManagedEncryptionKeyArn
          # AppSync permissions for updating document status
          - Effect: Allow
            Action:
              - appsync:GraphQL
            Resource: 
              - !Sub "${AppSyncApiArn}/types/Mutation/*"
          - Effect: Allow
            Action: bedrock:InvokeModel
            Resource: 
                - !Sub "arn:aws:bedrock:*::foundation-model/*"
                - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/*"
          - !If
            - HasGuardrailConfig
            - Effect: Allow
              Action: bedrock:ApplyGuardrail
              Resource: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:guardrail/${BedrockGuardrailId}"
            - !Ref AWS::NoValue

  ExtractionFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !Ref CustomerManagedEncryptionKeyArn
      LogGroupName: !Sub "/${AWS::StackName}/lambda/ExtractionFunction"
      RetentionInDays: !Ref LogRetentionDays

  ProcessResultsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Cloudwatch does not support resource-level permissions"
          - id: W89
            reason: "This Lambda function does not require VPC access as it only interacts with AWS services via AWS APIs"
          - id: W92
            reason: "Function does not require concurrent execution limits as it is designed to scale based on demand"
    # checkov:skip=CKV_AWS_116: "DLQ not required for this function as StepFunctions will handle retries"
    # checkov:skip=CKV_AWS_173: "Environment variables do not contain sensitive data - only configuration values like feature flags and non-sensitive settings"
    # checkov:skip=CKV_AWS_117: "Function does not require VPC access as it only interacts with AWS services via APIs"
    # checkov:skip=CKV_AWS_115: "Function does not require reserved concurrency as it scales based on demand"
    Properties:
      CodeUri: src/processresults_function/
      Handler: index.handler
      Runtime: python3.12
      Timeout: 900
      MemorySize: 4096
      Environment:
        Variables:
          METRIC_NAMESPACE: !Ref StackName
          LOG_LEVEL: !Ref LogLevel
          APPSYNC_API_URL: !Ref AppSyncApiUrl
      LoggingConfig:
        LogGroup: !Ref ProcessResultsFunctionLogGroup
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref InputBucket
        - S3CrudPolicy:
            BucketName: !Ref OutputBucket
        - Statement:
          - Effect: Allow
            Action: cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: !Ref CustomerManagedEncryptionKeyArn
          # AppSync permissions for updating document status
          - Effect: Allow
            Action:
              - appsync:GraphQL
            Resource: 
              - !Sub "${AppSyncApiArn}/types/Mutation/*"

  ProcessResultsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !Ref CustomerManagedEncryptionKeyArn
      LogGroupName: !Sub "/${AWS::StackName}/lambda/ProcessResultsFunction"
      RetentionInDays: !Ref LogRetentionDays

  SummarizationFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Cloudwatch does not support resource-level permissions"
          - id: W89
            reason: "This Lambda function does not require VPC access as it only interacts with AWS services via AWS APIs"
          - id: W92
            reason: "Function does not require concurrent execution limits as it is designed to scale based on demand"
    # checkov:skip=CKV_AWS_116: "DLQ not required for this function as StepFunctions will handle retries"
    # checkov:skip=CKV_AWS_173: "Environment variables do not contain sensitive data - only configuration values like feature flags and non-sensitive settings"    
    # checkov:skip=CKV_AWS_117: "Function does not require VPC access as it only interacts with AWS services via APIs"
    # checkov:skip=CKV_AWS_115: "Function does not require reserved concurrency as it scales based on demand"
    Properties:
      CodeUri: src/summarization_function/
      Handler: index.handler
      Runtime: python3.12
      Timeout: 900
      MemorySize: 4096
      Environment:
        Variables:
          METRIC_NAMESPACE: !Ref StackName
          CONFIGURATION_TABLE_NAME: !Ref ConfigurationTable
          GUARDRAIL_ID_AND_VERSION: !If [HasGuardrailConfig, !Sub "${BedrockGuardrailId}:${BedrockGuardrailVersion}", ""]
          LOG_LEVEL: !Ref LogLevel
          APPSYNC_API_URL: !Ref AppSyncApiUrl
      LoggingConfig:
        LogGroup: !Ref SummarizationFunctionLogGroup
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref InputBucket
        - S3CrudPolicy:
            BucketName: !Ref OutputBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref ConfigurationTable
        - Statement:
          - Effect: Allow
            Action: cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: !Ref CustomerManagedEncryptionKeyArn
          # AppSync permissions for updating document status
          - Effect: Allow
            Action:
              - appsync:GraphQL
            Resource: 
              - !Sub "${AppSyncApiArn}/types/Mutation/*"
          - Effect: Allow
            Action: bedrock:InvokeModel
            Resource: 
                - !Sub "arn:aws:bedrock:*::foundation-model/*"
                - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/*"
          - !If
            - HasGuardrailConfig
            - Effect: Allow
              Action: bedrock:ApplyGuardrail
              Resource: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:guardrail/${BedrockGuardrailId}"
            - !Ref AWS::NoValue

  SummarizationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !Ref CustomerManagedEncryptionKeyArn
      LogGroupName: !Sub "/${AWS::StackName}/lambda/SummarizationFunction"
      RetentionInDays: !Ref LogRetentionDays

  DocumentProcessingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub "${AWS::StackName}-DocumentProcessingWorkflow"
      DefinitionUri: statemachine/workflow.asl.json
      DefinitionSubstitutions:
        OCRFunctionArn: !GetAtt OCRFunction.Arn
        ClassificationFunctionArn: !GetAtt ClassificationFunction.Arn
        ExtractionFunctionArn: !GetAtt ExtractionFunction.Arn
        ProcessResultsLambdaArn: !GetAtt ProcessResultsFunction.Arn
        SummarizationLambdaArn: !GetAtt SummarizationFunction.Arn
        IsSummarizationEnabled: !If [IsSummarizationEnabled, "true", "false"]
        OutputBucket: !Ref OutputBucket
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup: !GetAtt StateMachineLogGroup.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref OCRFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ClassificationFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ExtractionFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ProcessResultsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref SummarizationFunction
        - CloudWatchLogsFullAccess

  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !Ref CustomerManagedEncryptionKeyArn
      LogGroupName: !Sub "/aws/vendedlogs/states/${AWS::StackName}/workflow"  # required prefix
      RetentionInDays: !Ref LogRetentionDays

  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${AWS::StackName}-${AWS::Region}-Pattern2-Subset"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [{"expression": "m1/PERIOD(m1)*60", "label": "Documents per Minute"}],
                  ["${StackName}", "InputDocuments", {"id": "m1", "stat": "Sum", "visible": false}]
                ],
                "region": "${AWS::Region}",
                "title": "Input Documents (per Minute)",
                "view": "timeSeries",
                "period": 60,
                "yAxis": {
                  "left": {
                    "label": "Count per Minute"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 8,
              "y": 0,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [{"expression": "m1/PERIOD(m1)*60", "label": "Pages per Minute"}],
                  ["${StackName}", "InputDocumentPages", {"id": "m1", "stat": "Sum", "visible": false}]
                ],
                "region": "${AWS::Region}",
                "title": "Input Document Pages (per Minute)",
                "view": "timeSeries",
                "period": 60,
                "yAxis": {
                  "left": {
                    "label": "Count per Minute"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 16,
              "y": 0,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [],
                "region": "${AWS::Region}",
                "title": "Blank",
                "view": "timeSeries",
                "period": 60,
                "yAxis": {
                  "left": {
                    "label": "N/A"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [{"expression": "m1/PERIOD(m1)*60", "label": "Tokens per Minute"}],
                  ["${StackName}", "InputTokens", {"id": "m1", "stat": "Sum", "visible": false}]
                ],
                "region": "${AWS::Region}",
                "title": "Input Tokens (per Minute)",
                "view": "timeSeries",
                "period": 60,
                "yAxis": {
                  "left": {
                    "label": "Count per Minute"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 8,
              "y": 6,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [{"expression": "m1/PERIOD(m1)*60", "label": "Tokens per Minute"}],
                  ["${StackName}", "OutputTokens", {"id": "m1", "stat": "Sum", "visible": false}]
                ],
                "region": "${AWS::Region}",
                "title": "Output Tokens (per Minute)",
                "view": "timeSeries",
                "period": 60,
                "yAxis": {
                  "left": {
                    "label": "Count per Minute"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 16,
              "y": 6,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [{"expression": "m1/PERIOD(m1)*60", "label": "Tokens per Minute"}],
                  ["${StackName}", "TotalTokens", {"id": "m1", "stat": "Sum", "visible": false}]
                ],
                "region": "${AWS::Region}",
                "title": "Total Tokens (per Minute)",
                "view": "timeSeries",
                "period": 60,
                "yAxis": {
                  "left": {
                    "label": "Count per Minute"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 12,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [{"expression": "m1/PERIOD(m1)*60", "label": "Total per Minute"}],
                  [{"expression": "m2/PERIOD(m2)*60", "label": "Succeeded per Minute"}],
                  [{"expression": "m3/PERIOD(m3)*60", "label": "Failed per Minute"}],
                  ["${StackName}", "BedrockRequestsTotal", {"id": "m1", "stat": "Sum", "visible": false}],
                  [".", "BedrockRequestsSucceeded", {"id": "m2", "stat": "Sum", "visible": false}],
                  [".", "BedrockRequestsFailed", {"id": "m3", "stat": "Sum", "visible": false}]
                ],
                "region": "${AWS::Region}",
                "title": "Bedrock Request Status (per Minute)",
                "view": "timeSeries",
                "period": 60,
                "yAxis": {
                  "left": {
                    "label": "Count per Minute"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 8,
              "y": 12,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [{"expression": "m1/PERIOD(m1)*60", "label": "Throttles per Minute"}],
                  [{"expression": "m2/PERIOD(m2)*60", "label": "Retry Success per Minute"}],
                  [{"expression": "m3/PERIOD(m3)*60", "label": "Max Retries Exceeded per Minute"}],
                  ["${StackName}", "BedrockThrottles", {"id": "m1", "stat": "Sum", "visible": false}],
                  [".", "BedrockRetrySuccess", {"id": "m2", "stat": "Sum", "visible": false}],
                  [".", "BedrockMaxRetriesExceeded", {"id": "m3", "stat": "Sum", "visible": false}]
                ],
                "region": "${AWS::Region}",
                "title": "Bedrock Retries (per Minute)",
                "view": "timeSeries",
                "period": 60,
                "yAxis": {
                  "left": {
                    "label": "Count per Minute"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 16,
              "y": 12,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["${StackName}", "BedrockRequestLatency", {"stat": "Average"}],
                  [".", "BedrockRequestLatency", {"stat": "p90"}],
                  [".", "BedrockRequestLatency", {"stat": "Maximum"}],
                  [".", "BedrockTotalLatency", {"stat": "Average"}],
                  [".", "BedrockTotalLatency", {"stat": "p90"}],
                  [".", "BedrockTotalLatency", {"stat": "Maximum"}]
                ],
                "region": "${AWS::Region}",
                "title": "Bedrock Latency - per request, and total (including backoff/retries)",
                "period": 300,
                "view": "timeSeries",
                "stacked": false,
                "annotations": {
                  "horizontal": [{
                    "value": ${ExecutionTimeThresholdMs},
                    "label": "Threshold (${ExecutionTimeThresholdMs}ms)",
                    "color": "#ff0000"
                  }]
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 18,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Duration", "FunctionName", "${OCRFunction}"]
                ],
                "region": "${AWS::Region}",
                "title": "OCR Function Duration",
                "period": 300,
                "annotations": {
                  "horizontal": [{
                    "value": ${ExecutionTimeThresholdMs},
                    "label": "Threshold (${ExecutionTimeThresholdMs}ms)",
                    "color": "#ff0000"
                  }]
                },
                "stat": "Average",
                "view": "timeSeries"
              }
            },
            {
              "type": "metric",
              "x": 8,
              "y": 18,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Duration", "FunctionName", "${ClassificationFunction}"]
                ],
                "region": "${AWS::Region}",
                "title": "Classification Function Duration",
                "period": 300,
                "annotations": {
                  "horizontal": [{
                    "value": ${ExecutionTimeThresholdMs},
                    "label": "Threshold (${ExecutionTimeThresholdMs}ms)",
                    "color": "#ff0000"
                  }]
                },
                "stat": "Average",
                "view": "timeSeries"
              }
            },
            {
              "type": "metric",
              "x": 16,
              "y": 18,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Duration", "FunctionName", "${ExtractionFunction}"]
                ],
                "region": "${AWS::Region}",
                "title": "Extraction Function Duration",
                "period": 300,
                "annotations": {
                  "horizontal": [{
                    "value": ${ExecutionTimeThresholdMs},
                    "label": "Threshold (${ExecutionTimeThresholdMs}ms)",
                    "color": "#ff0000"
                  }]
                },
                "stat": "Average",
                "view": "timeSeries"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 24,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${OCRFunctionLogGroup}' | filter @type = \"REPORT\" | fields @timestamp, @logStream, @billedDuration, @maxMemoryUsed/1024/1024 as memoryUsedMB | filter @billedDuration > ${ExecutionTimeThresholdMs} | sort by @billedDuration desc | limit 20",
                "region": "${AWS::Region}",
                "title": "OCR Lambda Long Running Invocations",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 24,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${OCRFunctionLogGroup}' | fields @timestamp, @logStream, @message | filter @message like /ERROR/ or @message like /Task timed out/ | parse @message /RequestId: (?<requestId>[^ ]*)/ | sort @timestamp desc | limit 20",
                "region": "${AWS::Region}",
                "title": "OCR Lambda Errors",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 30,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${ClassificationFunctionLogGroup}' | filter @type = \"REPORT\" | fields @timestamp, @logStream, @billedDuration, @maxMemoryUsed/1024/1024 as memoryUsedMB | filter @billedDuration > ${ExecutionTimeThresholdMs} | sort by @billedDuration desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Classification Lambda Long Running Invocations",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 30,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${ClassificationFunctionLogGroup}' | fields @timestamp, @logStream, @message | filter @message like /ERROR/ or @message like /Task timed out/ | parse @message /RequestId: (?<requestId>[^ ]*)/ | sort @timestamp desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Classification Lambda Errors",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 36,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${ExtractionFunctionLogGroup}' | filter @type = \"REPORT\" | fields @timestamp, @logStream, @billedDuration, @maxMemoryUsed/1024/1024 as memoryUsedMB | filter @billedDuration > ${ExecutionTimeThresholdMs} | sort by @billedDuration desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Extraction Lambda Long Running Invocations",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 36,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${ExtractionFunctionLogGroup}' | fields @timestamp, @logStream, @message | filter @message like /ERROR/ or @message like /Task timed out/ | parse @message /RequestId: (?<requestId>[^ ]*)/ | sort @timestamp desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Extraction Lambda Errors",
                "view": "table"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 42,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Duration", "FunctionName", "${SummarizationFunction}"]
                ],
                "region": "${AWS::Region}",
                "title": "Summarization Function Duration",
                "period": 300,
                "annotations": {
                  "horizontal": [{
                    "value": ${ExecutionTimeThresholdMs},
                    "label": "Threshold (${ExecutionTimeThresholdMs}ms)",
                    "color": "#ff0000"
                  }]
                },
                "stat": "Average",
                "view": "timeSeries"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 42,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${SummarizationFunctionLogGroup}' | fields @timestamp, @logStream, @message | filter @message like /ERROR/ or @message like /Task timed out/ | parse @message /RequestId: (?<requestId>[^ ]*)/ | sort @timestamp desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Summarization Lambda Errors",
                "view": "table"
              }
            }

          ]
        }

Outputs:

  # Outputs required by main template

  StateMachineName:
    Description: Step Functions State machine Name
    Value: !GetAtt DocumentProcessingStateMachine.Name

  StateMachineArn:
    Description: Step Functions State machine ARN
    Value: !GetAtt DocumentProcessingStateMachine.Arn
  
  StateMachineLogGroup:
    Description: Step Functions State machine LogGroup
    Value: !Ref StateMachineLogGroup

  DashboardName:
    Description: Name of the Pattern 1 CloudWatch Dashboard
    Value: !Ref Dashboard

  DashboardArn:
    Description: ARN of the Pattern 1 CloudWatch Dashboard
    Value: !Sub "arn:aws:cloudwatch::${AWS::AccountId}:dashboard/${Dashboard}"
