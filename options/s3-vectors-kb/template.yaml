AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'S3 Vectors Knowledge Base Infrastructure for GenAI IDP Accelerator'

Parameters:
  pS3VectorsCatalogTableName:
    Type: String
    Description: 'Name of the DynamoDB catalog table used for S3 Vectors (status, vectors, sessions, history)'
  pS3VectorsCatalogTableArn:
    Type: String
    Description: 'ARN of the DynamoDB catalog table used for S3 Vectors'
  pStackName:
    Type: String
    Description: 'Name of the parent CloudFormation stack'
  pLogLevel:
    Type: String
    Default: INFO
  pLogRetentionDays:
    Type: Number
    Default: 30
  pPermissionsBoundaryArn:
    Type: String
    Default: ""
  pCustomerManagedEncryptionKeyArn:
    Type: String
    Description: "ARN of the customer-managed KMS key for encryption (must be the key ARN, not the alias)"
    Default: ""
  pAlertsTopicArn:
    Type: String
  pOutputBucket:
    Type: String
  pWorkingBucket:
    Type: String
  pConfigurationTable:
    Type: String
  pKnowledgeBaseModelId:
    Type: String
  pGuardrailId:
    Type: String
    Default: ""
  pGuardrailVersion:
    Type: String
    Default: ""
  LightweightLLMModelId:
    Type: String
    Default: "amazon.nova-micro-v1:0"
    Description: Lightweight LLM model ID for local region
  CrossRegionLightweightLLMModelId:
    Type: String
    Default: "us.amazon.nova-micro-v1:0"
    Description: Cross-region LLM model ID (with region prefix for cross-region access)
  VectorIndexName:
    Type: String
    Description: 'Name for the S3 vector index (auto-generated if empty)'
    Default: 'default-index'
  VectorSimilarityMeasure:
    Type: String
    Default: 'cosine'
  EmbeddingModelId:
    Type: String
    Default: 'amazon.titan-embed-text-v2'
  MaxVectorsPerBatch:
    Type: Number
    Default: 100
  S3VectorsIngestionScheduleExpression:
    Type: String
    Default: "cron(0/30 * ? * * *)"

Mappings:
  EmbeddingModelDimensions:
    amazon.titan-embed-text-v1:
      Dimension: 1536
    amazon.titan-embed-text-v2:
      Dimension: 1024
    cohere.embed-english-v3:
      Dimension: 1024
    cohere.embed-multilingual-v3:
      Dimension: 1024

Conditions:
  pHasPermissionsBoundary: !Not [!Equals [!Ref pPermissionsBoundaryArn, ""]]
  pHasGuardrailConfig: !And [!Not [!Equals [!Ref pGuardrailId, ""]], !Not [!Equals [!Ref pGuardrailVersion, ""]]]
  pHasCustomerManagedEncryptionKey: !Not [!Equals [!Ref pCustomerManagedEncryptionKeyArn, ""]]

Resources:

  CrossRegionKnowledgeBaseModelId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: CrossRegionKnowledgeBaseModelId
      Type: String
      Value: !Join
        - "."
        - [!Select [1, !Split [".", !Ref pKnowledgeBaseModelId]],
           !Select [2, !Split [".", !Ref pKnowledgeBaseModelId]]]

  S3VectorsProvisionerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${pStackName}-S3VecProvisionerLog"
      KmsKeyId: !Ref pCustomerManagedEncryptionKeyArn
      RetentionInDays: !Ref pLogRetentionDays

  S3VectorsProvisionerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/s3_vectors_provisioner
      Handler: index.handler
      Runtime: python3.12
      Timeout: 120
      MemorySize: 256
      PermissionsBoundary: !If [pHasPermissionsBoundary, !Ref pPermissionsBoundaryArn, !Ref AWS::NoValue]
      LoggingConfig:
        LogGroup: !Ref S3VectorsProvisionerFunctionLogGroup
      Environment:
        Variables:
          LOG_LEVEL: !Ref pLogLevel
          STACK_NAME: !Ref pStackName
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3vectors:CreateVectorBucket
                - s3vectors:CreateIndex
                - s3vectors:ListVectorBuckets
                - s3vectors:DescribeVectorBucket
              Resource: "*"
            - Effect: Allow
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
                - kms:CreateGrant
              Resource: !Ref pCustomerManagedEncryptionKeyArn

  S3VectorsProvisioner:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt S3VectorsProvisionerFunction.Arn
      VectorBucketName: !Sub "${pStackName}-s3vectors"
      VectorIndexName: !Ref VectorIndexName
      VectorDimension: !FindInMap 
        - EmbeddingModelDimensions
        - !Select [0, !Split [":0", !Ref EmbeddingModelId]]
        - Dimension
      DistanceMetric: !Ref VectorSimilarityMeasure


  S3VectorsQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/s3_vectors_query
      Handler: index.handler
      Runtime: python3.12
      Timeout: 60
      MemorySize: 512
      PermissionsBoundary: !If [pHasPermissionsBoundary, !Ref pPermissionsBoundaryArn, !Ref AWS::NoValue]
      Environment:
        Variables:
          LOG_LEVEL: !Ref pLogLevel
          STACK_NAME: !Ref pStackName
          S3_VECTORS_BUCKET: !Sub "${pStackName}-s3vectors"
          S3_VECTORS_INDEX_NAME: !Ref VectorIndexName
          VECTOR_SIMILARITY_MEASURE: !Ref VectorSimilarityMeasure
          EMBEDDING_MODEL_ID: !Ref EmbeddingModelId
          LLM_MODEL_ID: !Ref pKnowledgeBaseModelId
          ALTERNATIVE_LLM_MODEL_ID: !GetAtt CrossRegionKnowledgeBaseModelId.Value
          LIGHTWEIGHT_LLM_MODEL_ID: !Ref LightweightLLMModelId
          ALTERNATE_LIGHTWEIGHT_LLM_MODEL_ID: !Ref CrossRegionLightweightLLMModelId
          S3_VECTORS_CATALOG_TABLE: !Ref pS3VectorsCatalogTableName
          GUARDRAIL_ID_AND_VERSION: !If [pHasGuardrailConfig, !Sub "${pGuardrailId}:${pGuardrailVersion}", ""]
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3vectors:QueryVectors
                - s3vectors:GetVectors
              Resource: "*"
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
                - bedrock:InvokeModelWithResponseStream
              Resource:
                # Unknown AWS Routing Behavior for Nova Models to inference-profile
                - !Sub "arn:${AWS::Partition}:bedrock:*::foundation-model/${EmbeddingModelId}"
                - !Sub "arn:${AWS::Partition}:bedrock:*::foundation-model/${pKnowledgeBaseModelId}"
                - !Sub "arn:${AWS::Partition}:bedrock:*::foundation-model/${LightweightLLMModelId}"
                - !Sub "arn:${AWS::Partition}:bedrock:*::foundation-model/${CrossRegionLightweightLLMModelId}"
                - !Sub "arn:${AWS::Partition}:bedrock:*::foundation-model/${CrossRegionKnowledgeBaseModelId.Value}"
                - !Sub "arn:${AWS::Partition}:bedrock:*:${AWS::AccountId}:inference-profile/${EmbeddingModelId}"
                - !Sub "arn:${AWS::Partition}:bedrock:*:${AWS::AccountId}:inference-profile/${pKnowledgeBaseModelId}"
                - !Sub "arn:${AWS::Partition}:bedrock:*:${AWS::AccountId}:inference-profile/${LightweightLLMModelId}"
                - !Sub "arn:${AWS::Partition}:bedrock:*:${AWS::AccountId}:inference-profile/${CrossRegionLightweightLLMModelId}"
                - !Sub "arn:${AWS::Partition}:bedrock:*:${AWS::AccountId}:inference-profile/${CrossRegionKnowledgeBaseModelId.Value}"
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: !Ref pS3VectorsCatalogTableArn
            - Effect: Allow
              Action:
                - cloudwatch:PutMetricData
              Resource: "*"

  S3VectorsIngestionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/s3_vectors_ingestion
      Handler: index.handler
      Runtime: python3.12
      Timeout: 900
      MemorySize: 1024
      PermissionsBoundary: !If [pHasPermissionsBoundary, !Ref pPermissionsBoundaryArn, !Ref AWS::NoValue]
      Environment:
        Variables:
          LOG_LEVEL: !Ref pLogLevel
          STACK_NAME: !Ref pStackName
          OUTPUT_BUCKET: !Ref pOutputBucket
          S3_VECTORS_BUCKET: !Sub "${pStackName}-s3vectors"
          S3_VECTORS_CATALOG_TABLE: !Ref pS3VectorsCatalogTableName
          S3_VECTORS_INDEX_NAME: !Ref VectorIndexName
          EMBEDDING_MODEL_ID: !Ref EmbeddingModelId
          MAX_VECTORS_PER_BATCH: !Ref MaxVectorsPerBatch
          VECTOR_DIMENSION: !FindInMap
            - EmbeddingModelDimensions
            - !Select [0, !Split [":0", !Ref EmbeddingModelId]]
            - Dimension
          VECTOR_SIMILARITY_MEASURE: !Ref VectorSimilarityMeasure
          CHUNK_SIZE: 300
          CHUNK_OVERLAP: 50
          USE_LLM_CLASSIFICATION: "false"
          LIGHTWEIGHT_LLM_MODEL_ID: !Ref LightweightLLMModelId
          ALTERNATE_LIGHTWEIGHT_LLM_MODEL_ID: !Ref CrossRegionLightweightLLMModelId
          CONFIGURATION_TABLE_NAME: !Ref pConfigurationTable
      LoggingConfig:
        LogGroup: !Ref S3VectorsIngestionFunctionLogGroup
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource: !Sub "arn:${AWS::Partition}:s3:::${pOutputBucket}"
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub "arn:${AWS::Partition}:s3:::${pOutputBucket}/*"
            - Effect: Allow
              Action:
                - s3vectors:PutVectors
                - s3vectors:CreateIndex
              Resource: "*"
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: !Ref pS3VectorsCatalogTableArn
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pConfigurationTable}"
            - !If
              - pHasCustomerManagedEncryptionKey
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                  - kms:CreateGrant
                Resource: !Ref pCustomerManagedEncryptionKeyArn
              - !Ref AWS::NoValue
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
                - bedrock:InvokeModelWithResponseStream
              Resource:
                # Unknown AWS Routing Behavior for Nova Models to inference-profile
                - !Sub "arn:${AWS::Partition}:bedrock:*::foundation-model/${EmbeddingModelId}"
                - !Sub "arn:${AWS::Partition}:bedrock:*::foundation-model/${LightweightLLMModelId}"
                - !Sub "arn:${AWS::Partition}:bedrock:*::foundation-model/${CrossRegionLightweightLLMModelId}"
                - !Sub "arn:${AWS::Partition}:bedrock:*:${AWS::AccountId}:inference-profile/${EmbeddingModelId}"
                - !Sub "arn:${AWS::Partition}:bedrock:*:${AWS::AccountId}:inference-profile/${LightweightLLMModelId}"
                - !Sub "arn:${AWS::Partition}:bedrock:*:${AWS::AccountId}:inference-profile/${CrossRegionLightweightLLMModelId}"
            - Effect: Allow
              Action:
                - cloudwatch:PutMetricData
              Resource: "*"

  S3VectorsIngestionFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${pStackName}-S3VecIngestFnLog"
      KmsKeyId: !Ref pCustomerManagedEncryptionKeyArn
      RetentionInDays: !Ref pLogRetentionDays

  S3VectorsIngestionSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      PermissionsBoundary: !If [pHasPermissionsBoundary, !Ref pPermissionsBoundaryArn, !Ref AWS::NoValue]
      Policies:
        - PolicyName: InvokeIngestionLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt S3VectorsIngestionFunction.Arn

  S3VectorsIngestionSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Description: "Schedule to trigger S3 Vectors ingestion"
      FlexibleTimeWindow:
        Mode: "OFF"
      ScheduleExpression: !Ref S3VectorsIngestionScheduleExpression
      ScheduleExpressionTimezone: "UTC"
      State: ENABLED
      Target:
        Arn: !GetAtt S3VectorsIngestionFunction.Arn
        RoleArn: !GetAtt S3VectorsIngestionSchedulerRole.Arn
        Input: !Sub |
          {
            "source": "scheduler",
            "action": "scan_and_ingest"
          }

  S3MetadataFilterAnalyzerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/s3_metadata_filter_analyzer
      Handler: index.handler
      Runtime: python3.12
      Timeout: 300
      MemorySize: 512
      PermissionsBoundary: !If [pHasPermissionsBoundary, !Ref pPermissionsBoundaryArn, !Ref AWS::NoValue]
      Environment:
        Variables:
          LOG_LEVEL: !Ref pLogLevel
          S3_VECTORS_BUCKET_NAME: !Sub "${pStackName}-s3vectors"
          S3_VECTORS_INDEX_NAME: !Ref VectorIndexName
          QUERY_LAMBDA_FUNCTION_NAME: !Ref S3VectorsQueryFunction
          WORKING_BUCKET: !Ref pWorkingBucket
          LLM_MODEL_ID: !Ref pKnowledgeBaseModelId
          ALTERNATIVE_LLM_MODEL_ID: !GetAtt CrossRegionKnowledgeBaseModelId.Value
      LoggingConfig:
        LogGroup: !Ref S3MetadataFilterAnalyzerLogGroup
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3vectors:ListVectors
                - s3vectors:GetVectors
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource: !Sub "arn:${AWS::Partition}:s3:::${pWorkingBucket}/*"
            - Effect: Allow
              Action:
                - lambda:GetFunctionConfiguration
                - lambda:UpdateFunctionConfiguration
              Resource: !GetAtt S3VectorsQueryFunction.Arn
            - Effect: Allow
              Action:
                - cloudwatch:PutMetricData
              Resource: "*"
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource:
                # Unknown AWS Routing Behavior for Nova Models to inference-profile
                - !Sub "arn:${AWS::Partition}:bedrock:*::foundation-model/${pKnowledgeBaseModelId}"
                - !Sub "arn:${AWS::Partition}:bedrock:*::foundation-model/${CrossRegionKnowledgeBaseModelId.Value}"
                - !Sub "arn:${AWS::Partition}:bedrock:*:${AWS::AccountId}:inference-profile/${pKnowledgeBaseModelId}"
                - !Sub "arn:${AWS::Partition}:bedrock:*:${AWS::AccountId}:inference-profile/${CrossRegionKnowledgeBaseModelId.Value}"
            - !If
              - pHasCustomerManagedEncryptionKey
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                  - kms:CreateGrant
                Resource: !Ref pCustomerManagedEncryptionKeyArn
              - !Ref AWS::NoValue

  S3MetadataFilterAnalyzerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${pStackName}-S3MetaFilterLog"
      KmsKeyId: !Ref pCustomerManagedEncryptionKeyArn
      RetentionInDays: !Ref pLogRetentionDays

  S3MetadataFilterAnalyzerSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 day)
      State: ENABLED
      Targets:
        - Arn: !GetAtt S3MetadataFilterAnalyzerFunction.Arn
          Id: "S3MetadataFilterAnalyzerTarget"

  S3MetadataFilterAnalyzerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt S3MetadataFilterAnalyzerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt S3MetadataFilterAnalyzerSchedule.Arn

  S3VectorsQueryLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${pStackName}-S3Vectors-HighQueryLatency'
      AlarmDescription: 'S3 Vectors query latency exceeds 15 seconds'
      MetricName: S3VectorsQueryLatency
      Namespace: !Ref pStackName
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 15000
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref pAlertsTopicArn

  S3VectorsIngestionFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${pStackName}-S3Vectors-IngestionFailures'
      AlarmDescription: 'S3 Vectors ingestion success rate below 95%'
      MetricName: S3VectorsIngestionSuccessRate
      Namespace: !Ref pStackName
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 95
      ComparisonOperator: LessThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref pAlertsTopicArn

  S3VectorsQueryFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${pStackName}-S3Vectors-QueryFailures'
      AlarmDescription: 'S3 Vectors query success rate below 95%'
      MetricName: S3VectorsQuerySuccessRate
      Namespace: !Ref pStackName
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 95
      ComparisonOperator: LessThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref pAlertsTopicArn

Outputs:
  S3VectorsProvisionerRoleArn:
    Description: ARN of the provisioner IAM role for S3 Vectors
    Value: !GetAtt S3VectorsProvisionerFunctionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-S3VectorsProvisionerRoleArn"

  S3VectorsProvisionerFunctionArn:
    Description: ARN of the provisioner Lambda function for S3 Vectors
    Value: !GetAtt S3VectorsProvisionerFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-S3VectorsProvisionerFunctionArn"

  S3VectorsCatalogTableName:
    Description: 'Name of the DynamoDB catalog table used for S3 Vectors (status, vectors, sessions, history)'
    Value: !Ref pS3VectorsCatalogTableName
  S3VectorsCatalogTableArn:
    Description: 'ARN of the DynamoDB catalog table used for S3 Vectors'
    Value: !Ref pS3VectorsCatalogTableArn
  S3VectorsQueryFunctionArn:
    Description: 'ARN of the S3 Vectors Query Lambda function'
    Value: !GetAtt S3VectorsQueryFunction.Arn
  S3VectorsIngestionFunctionArn:
    Description: 'ARN of the S3 Vectors Ingestion Lambda function'
    Value: !GetAtt S3VectorsIngestionFunction.Arn
  S3MetadataFilterAnalyzerFunctionArn:
    Description: 'ARN of the S3 Metadata Filter Analyzer Lambda function'
    Value: !GetAtt S3MetadataFilterAnalyzerFunction.Arn
  EmbeddingModelId:
    Description: 'Configured embedding model for vector generation'
    Value: !Ref EmbeddingModelId
  MaxVectorsPerBatch:
    Description: 'Configured maximum vectors per batch for ingestion'
    Value: !Ref MaxVectorsPerBatch
  VectorSimilarityMeasure:
    Description: 'Configured distance metric for vectors'
    Value: !Ref VectorSimilarityMeasure
